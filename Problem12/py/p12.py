# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
#   ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# -----
#
# Strategy
#
# - Iterate over the equation ((n(n+1))/2) (the triangular number formula)
# - For each triangular number yielded, determine all factors of the number
# - Count the number of factors in the triangular number
# - If the number of factors is greater than 500, return the triangular number,
#   - else n + 1
#
# References:
# https://en.wikipedia.org/wiki/Triangular_number

# Test divisor limit
factor_limit = 5

# factor_limit = 500


def main():
    n = 0
    factor_len_list = [1]

    while True:
        n += 1
        triangular_number = int(((n * (n + 1)) / 2))
        # Check if even, then get the upper found of a potential factor
        # if triangular_number % 2 == 0:
        #     largest_potential_factor = int(triangular_number / 2)
        # else:
        #     largest_potential_factor = int(((triangular_number + 1) / 2))
        # Replacing the commented code above with the single line below
        #  took the runtime from 6 hours to 6 minutes
        largest_potential_factor = int(round(triangular_number**(1/2)))

        factors = [1]
        for candidate_factor in range(1, largest_potential_factor):
            if triangular_number % candidate_factor == 0:
                quotient = int(triangular_number / candidate_factor)
                factors.extend([candidate_factor, quotient])

        factors = list(set(factors))
        factors.sort()

        # Since the process takes a while to run, added some progresse indications
        if len(factors) > max(factor_len_list):
            print(triangular_number, "+", len(factors))
        if n % 1000 == 0:
            print(n, ":", max(factor_len_list))

        if len(factors) > factor_limit:
            break

        factor_len_list.append(len(factors))
        factor_len_list = list(set(factor_len_list))

    print("Triangle number with greater than", factor_limit, "factors:")
    print(triangular_number)


if __name__ == "__main__":
    main()
